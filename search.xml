<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SSH的使用笔记</title>
    <url>/2023/10/03/SSH%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h2><p>此笔记中使用的ssh环境默认是基于是Ubuntu和Windows的。其他的未试验过，暂不知晓。</p>
<p>此笔记的ssh使用时基于本人在学习使用中遇到的问题给出的一些解决方案。</p>
<h2 id="SSH其他笔记"><a href="#SSH其他笔记" class="headerlink" title="SSH其他笔记"></a>SSH其他笔记</h2><p>ssh生成的文件一般在路径<code>~/.ssh</code>下，一般会生成三个文件：<code>id_rsa  id_rsa.pub  known_hosts</code></p>
<p>id_rsa为私钥，id_rsa.pub为公钥， known_hosts为记录的连接，ssh会把你每个你访问过计算机的公钥(public key)都记录在~&#x2F;.ssh&#x2F;known_hosts。当下次访问相同计算机时，OpenSSH会核对公钥。如果公钥不同，OpenSSH会发出警告， 避免你受到DNS Hijack之类的攻击。（摘自他人的一些理解，后续会更行）</p>
<p>其他的文件还有<code>config</code>：</p>
<p>开始可能没有config文件，我们需要自己新建一个config文件。在使用ssh连接服务器时，经常要输入一些不同的主机地址和密码，使用config文件可以很好的解决这个问题，也就是说我们能够通过<strong>config文件能够实现免密登录</strong>。</p>
<p><strong>config配置内容：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host：服务名【可以随意取】</span><br><span class="line">HostName：linux服务器ip/主机名/域名</span><br><span class="line">User：用户名</span><br><span class="line">Port：端口号默认为22</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><br>（1）若HostName中我们输入的是主机名和域名，那我们可能需要在&#x2F;etc&#x2F;hosts文件下配置IP和主机名或域名的映射。<br>（2）若我们在对应服务器中的authorized_keys文件都配置了密钥，那我们这里也不用配置User和Port两个配置项。</p>
<h2 id="Windows上使用ssh访问本机VMware中的Ubuntu虚拟机"><a href="#Windows上使用ssh访问本机VMware中的Ubuntu虚拟机" class="headerlink" title="Windows上使用ssh访问本机VMware中的Ubuntu虚拟机"></a>Windows上使用ssh访问本机VMware中的Ubuntu虚拟机</h2><p>首先检查一下Ubuntu虚拟机上是否安装了ssh服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure>

<p>启动ssh服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure>

<p>重启ssh服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>

<p>检查ssh服务是否在运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl status ssh</span><br></pre></td></tr></table></figure>

<p>如果有UFW防火墙，则打开ssh端口(未实验过)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw allow ssh</span><br></pre></td></tr></table></figure>

<p>打开VMware中的 <code>虚拟机-》虚拟机设置 </code>或者<code>CTRL+D</code>。选择网络适配器，此处用的是</p>
<p>通过Windows上的终端</p>
<p>此处用的是<a href="https://mobaxterm.mobatek.net/">MobaXterm</a></p>
<p>使用ssh直接连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh 用户名username@IP地址xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>

<p>遇到<code>Are you sure you want to continue connecting (yes/no/[fingerprint])?</code></p>
<p>直接输入<code>yes</code>即可。</p>
<p><strong>其他相关命令</strong></p>
<p>停止ssh服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo stop ssh</span><br></pre></td></tr></table></figure>

<p>将ssh的客户端以及服务端卸载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get remove openssh-client #卸载ssh客户端apt-get remove openssh-server #卸载ssh服务端</span><br></pre></td></tr></table></figure>

<p>安装ssh服务端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install openssh-server </span><br></pre></td></tr></table></figure>

<p> 安装ssh客户端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install openssh-client</span><br></pre></td></tr></table></figure>

<h2 id="ssh生成密钥与删除密钥"><a href="#ssh生成密钥与删除密钥" class="headerlink" title="ssh生成密钥与删除密钥"></a>ssh生成密钥与删除密钥</h2><p><strong>检查已有的SSH KEY</strong></p>
<p>首先，检查本地主机是否已经存在ssh key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myx@myx-virtual-machine:~/.ssh$ ls</span><br><span class="line">id_rsa  id_rsa.pub  known_hosts</span><br></pre></td></tr></table></figure>

<p>其中id_rsa为私钥，id_rsa.pub为公钥， known_hosts为记录的连接</p>
<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br></pre></td></tr></table></figure>

<p>会直接给出当前用户的SSH密钥列表。</p>
<p>__生成ssh key __（存在时则直接跳过生成ssh key）<br>如果不存在ssh key，使用如下命令生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></figure>

<p>执行后一直回车即可，可按需求输入密码。</p>
<p>生成完以后再用第二步命令，查看ssh key</p>
<p>__获取ssh key公钥内容__（即id_rsa.pub）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>之后就可以将公钥交给github之类的使用即可。</p>
<p><strong>删除密钥</strong></p>
<p>使用如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br></pre></td></tr></table></figure>

<p>会直接给出当前用户的SSH密钥列表。</p>
<p>找到要删除的密钥文件，使用以下命令删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm ~/.ssh/密钥文件名</span><br></pre></td></tr></table></figure>

<p>想要删除所有的ssh密钥，包括已经添加到ssh代理中的密钥(谨慎删除！)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf ~/.ssh</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Ubuntu使用</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Wordpress建站经验</title>
    <url>/2023/10/03/Wordpress%E5%BB%BA%E7%AB%99%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="WordPress配置流程"><a href="#WordPress配置流程" class="headerlink" title="WordPress配置流程"></a>WordPress配置流程</h2><h3 id="安装MySQL并创建wordpress数据库，安装Nginx"><a href="#安装MySQL并创建wordpress数据库，安装Nginx" class="headerlink" title="安装MySQL并创建wordpress数据库，安装Nginx"></a>安装MySQL并创建wordpress数据库，安装Nginx</h3><p>（之前看一篇博客要安装Apache？存疑，后面用的是Nginx代理，似乎没用到Apache）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apache2</span><br><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure>

<p>Apache好像可以不用安装？存疑，未尝试。</p>
<p>然后设置MySQL服务器</p>
<p>先创建一个root用户：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></table></figure>

<p>进入后，先创建用户，密码改为自己想要的就行，后面会用到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure>

<p>想要立即生效，我们需要执行Flush</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<p>我们在控制台输入exit，退出mysql，重新以root用户身份登录看看，是否正常。</p>
<p>在控制台输入</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>成功登录后，我们需要给wordpress创建一个数据库，然后添加一个用户执行权限。</p>
<p>为 wordpress 创建一个叫 wordpress 的数据库</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE wordpress;</span><br></pre></td></tr></table></figure>

<p>因为我们数据库是8.0以上的版本，很多博客给的输入方式是针对于MySQL 5.7版本的，已经过时了，因此我们这里直接使用MySQL 8.0以上的语法就好。</p>
<p>先创建用户：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user &#x27;user&#x27;@&quot;localhost&quot; IDENTIFIED BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure>

<p>然后分别按下面的操作执行：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 授权</span><br><span class="line">mysql&gt; grant all on wordpress.* to &quot;user&quot;@&quot;localhost&quot; with grant option;</span><br><span class="line"># 使配置生效。</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"># 退出MySQL。</span><br><span class="line">mysql&gt; exit;</span><br></pre></td></tr></table></figure>

<p>这样子，数据库我们就设置好了</p>
<h3 id="安装PHP和PHP的依赖以及Wordpress并修改文件目录权限"><a href="#安装PHP和PHP的依赖以及Wordpress并修改文件目录权限" class="headerlink" title="安装PHP和PHP的依赖以及Wordpress并修改文件目录权限"></a>安装PHP和PHP的依赖以及Wordpress并修改文件目录权限</h3><p>安装一下PHP和PHP的依赖</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo apt install php libapache2-mod-php php-mysql</span><br><span class="line"></span><br><span class="line">sudo apt install php-curl php-gd php-xml php-mbstring  php-xmlrpc php-zip php-soap php-intl</span><br></pre></td></tr></table></figure>

<p>最后，我们安装一下WordPress就好</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">curl -O https://wordpress.org/latest.tar.gz</span><br><span class="line">tar xzvf latest.tar.gz</span><br></pre></td></tr></table></figure>

<p>由于PHP默认访问 &#x2F;var&#x2F;www&#x2F;html&#x2F; 文件夹，所以我们需要把 wordpress 文件夹里的文件都复制到 &#x2F;var&#x2F;www&#x2F;html&#x2F; 文件夹</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo mv wordpress/* /var/www/html/</span><br></pre></td></tr></table></figure>

<p>修改一下 &#x2F;var&#x2F;www&#x2F;html&#x2F; 目录权限：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo chmod -R 777 /var/www/html/</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>使用Apache服务的</strong>(我没用过)</p>
<p>将apache指定到index.html</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo mv /var/www/html/index.html /var/www/html/index~.html</span><br></pre></td></tr></table></figure>

<p>重启 Apache 服务：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>配置WordPress</strong></p>
<p>重命名示例文件wp-config（<strong>此处的路径*&#x2F;root&#x2F;wordpress*对应你自己的存放路径</strong>）：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">mv /var/www/html/wp-config-sample.php /root/wordpress/wp-config.php</span><br></pre></td></tr></table></figure>

<p>修改配置文件内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">vi /var/www/html/wp-config.php</span><br></pre></td></tr></table></figure>

<p>修改的内容包括<strong>DB_NAME，DB_USER，DB_PASSWORD以及下面的唯一key</strong>，其中前三个是在第二步自己设置的内容，唯一key可以直接去它提供的网站上拷贝，网站地址就在中间那串注释里<a href="https://api.wordpress.org/secret-key/1.1/salt/">https://api.wordpress.org/secret-key/1.1/salt/</a> WordPress.org secret-key service，修改部分文件如下所示，key免费获取的，不用抄这的，其它没改的先不要动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/////其它。。。</span><br><span class="line"></span><br><span class="line">// ** Database settings - You can get this info from your web host ** //</span><br><span class="line">/** The name of the database for WordPress */</span><br><span class="line">define( &#x27;DB_NAME&#x27;, &#x27;wordpress&#x27; );</span><br><span class="line"></span><br><span class="line">/** Database username */</span><br><span class="line">define( &#x27;DB_USER&#x27;, &#x27;root&#x27; );</span><br><span class="line"></span><br><span class="line">/** Database password */</span><br><span class="line">define( &#x27;DB_PASSWORD&#x27;, &#x27;123456@MyxLn&#x27; );</span><br><span class="line"></span><br><span class="line">/** Database hostname */</span><br><span class="line">define( &#x27;DB_HOST&#x27;, &#x27;localhost&#x27; );</span><br><span class="line"></span><br><span class="line">/** Database charset to use in creating database tables. */</span><br><span class="line">define( &#x27;DB_CHARSET&#x27;, &#x27;utf8&#x27; );</span><br><span class="line"></span><br><span class="line">/** The database collate type. Don&#x27;t change this if in doubt. */</span><br><span class="line">define( &#x27;DB_COLLATE&#x27;, &#x27;&#x27; );</span><br><span class="line"></span><br><span class="line">/** language settings **/</span><br><span class="line">define( &#x27;WPLANG&#x27; , &#x27;zh_CN&#x27; );</span><br><span class="line"></span><br><span class="line">/**#@+</span><br><span class="line"> * Authentication unique keys and salts.</span><br><span class="line"> *</span><br><span class="line"> * Change these to different unique phrases! You can generate these using</span><br><span class="line"> * the &#123;@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service&#125;.</span><br><span class="line"> *</span><br><span class="line"> * You can change these at any point in time to invalidate all existing cookies.</span><br><span class="line"> * This will force all users to have to log in again.</span><br><span class="line"> *</span><br><span class="line"> * @since 2.6.0</span><br><span class="line"> */</span><br><span class="line">define( &#x27;AUTH_KEY&#x27;,         &#x27;qonGde%itgR.OWGdE#VoOwbu61 a-LxsS_|TMOWb,:/.~QQq&lt;$GX[]S?X=[=*ThC&#x27; );</span><br><span class="line">define( &#x27;SECURE_AUTH_KEY&#x27;,  &#x27;V(cV-A6rw=EM,fSV2qM(&#123;4yUt|;&amp;tU$CFbj~-E[t1^%M.NM4#c^Ek0/0[L22axhg&#x27; );</span><br><span class="line">define( &#x27;LOGGED_IN_KEY&#x27;,    &#x27;r=d:&#123; m/&#125;(ake[x&lt;?P:U5KWFzfCdcq;#*ArxHz-o zjBf)oxmSC&#125;x,nO1 ]unvTi&#x27; );</span><br><span class="line">define( &#x27;NONCE_KEY&#x27;,        &#x27;H-_yA-^Kio&gt;yZiY(D0dB!^rql:w$Q,,6$caBdVQ:A#&lt;|zFv`ZJF7tYUZPBu&#125;YIj4&#x27; );</span><br><span class="line">define( &#x27;AUTH_SALT&#x27;,        &#x27;_E/w^4e.&gt;QD~^6W-L*guM,MqX,F-mew9+3S%7W1t,*NG?_E|9vg32MciS;-@SA.k&#x27; );</span><br><span class="line">define( &#x27;SECURE_AUTH_SALT&#x27;, &#x27;iZ-+lSi?`3^WnwLN&gt;~`7&amp;lV&#123;1Ki&lt;~z&lt;H6B*Dk5)BrR|hr;yxY4R7|=A&amp;2^tSvE3d&#x27; );</span><br><span class="line">define( &#x27;LOGGED_IN_SALT&#x27;,   &#x27;@*KH?)&gt;@M6+Y(4VpV%),bV9TLzi&#125;s^xMf~QcYqH- ,,zg&lt;(Y;77[&gt;Yg.47!E2wx8&#x27; );</span><br><span class="line">define( &#x27;NONCE_SALT&#x27;,       &#x27;e.O:`Xo`4J*H-QHp6joF9@4&amp;P yCzoeO+&gt;d3+wy[h#!Ob&amp;|BA?5EbOQl8uuz&#125;v&amp;r&#x27; );</span><br><span class="line"></span><br><span class="line">/////其它。。。</span><br></pre></td></tr></table></figure>



<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>现在，本地端的基本配置完成。wordpress所有文件都在<code>	/var/www/html/</code>目录下，目录结构大致如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── wp-admin</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── images</span><br><span class="line">│   ├── includes</span><br><span class="line">│   ├── js</span><br><span class="line">│   ├── maint</span><br><span class="line">│   ├── network</span><br><span class="line">│   └── user</span><br><span class="line">├── wp-content</span><br><span class="line">│   ├── languages</span><br><span class="line">│   ├── plugins</span><br><span class="line">│   ├── themes</span><br><span class="line">│   ├── uploads</span><br><span class="line">│   ├── wpvividbackups</span><br><span class="line">│   ├── wpvivid_staging</span><br><span class="line">│   └── wpvivid_uploads</span><br><span class="line">└── wp-includes</span><br><span class="line">    ├── assets</span><br><span class="line">    ├── block-patterns</span><br><span class="line">    ├── blocks</span><br><span class="line">    ├── block-supports</span><br><span class="line">    ├── certificates</span><br><span class="line">    ├── css</span><br><span class="line">    ├── customize</span><br><span class="line">    ├── fonts</span><br><span class="line">    ├── html-api</span><br><span class="line">    ├── ID3</span><br><span class="line">    ├── images</span><br><span class="line">    ├── IXR</span><br><span class="line">    ├── js</span><br><span class="line">    ├── php-compat</span><br><span class="line">    ├── PHPMailer</span><br><span class="line">    ├── pomo</span><br><span class="line">    ├── Requests</span><br><span class="line">    ├── rest-api</span><br><span class="line">    ├── SimplePie</span><br><span class="line">    ├── sitemaps</span><br><span class="line">    ├── sodium_compat</span><br><span class="line">    ├── style-engine</span><br><span class="line">    ├── Text</span><br><span class="line">    ├── theme-compat</span><br><span class="line">    └── widgets</span><br></pre></td></tr></table></figure>

<p>建站主要关心的就是wp-content中的几个文件夹了，包括主题（theme）、插件（plugins）。语言languages文件夹要下载中文包（从官网上下的，压缩包里似乎是全套的wordpress文件，也就是上面展示的文件，他那个压缩包里的wp-content下的languages文件夹直接复制过来的）</p>
<p>wpvividbackups则是wpvividbackups插件自动建立的。插件、主题的安装后面讲。</p>
<h3 id="修改Nginx配置"><a href="#修改Nginx配置" class="headerlink" title="修改Nginx配置"></a>修改Nginx配置</h3><p>Nginx安装后，就可以访问你的ip地址或域名，看到一个nginx的提示页面了，好像是403.没安装时是直接提示无法访问。</p>
<p>修改权限（这些文件都是root的，而Nginx默认是www-data用户来运行，所以没有权限写入root的文件）：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">chown -R www-data:www-data /var/www/html</span><br></pre></td></tr></table></figure>

<p>可通过<code>whereis nginx</code>查看路径</p>
<p>在<code>/etc/nginx</code>下游nginx的配置文件nginx.conf，一般不用直接动这里（有问题再看），里面配置了引用用户在<code>conf.d</code>和<code>sites-available</code>文件下的配置。</p>
<p>此处更改<code>sites-available</code>文件夹下的default文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim default</span><br></pre></td></tr></table></figure>

<p>我们需要做如下修改：</p>
<ol>
<li><p>root处路径改为<code>/var/www/html</code></p>
</li>
<li><p>在index处添加index.php作为我们的起始页面；</p>
</li>
<li><p>修改server_name来指向我们的域名或者是公网IP；</p>
</li>
<li><p>忽略那些以#开头的行。（原文：*For the actual PHP processing, we just need to uncomment a segment of the file that handles PHP requests by removing the pound symbols (#) from in front of each line. This will be the <code>location ~\.php$</code> location block, the included <code>fastcgi-php.conf</code> snippet, and the socket associated with <code>php-fpm</code>*）</p>
</li>
<li><p>用同样的方法忽略.htaccess文件。（原文：*We will also uncomment the location block dealing with <code>.htaccess</code> files using the same method. Nginx doesn’t process these files. If any of these files happen to find their way into the document root, they should not be served to visitors.*）</p>
</li>
<li><p>将server后两个location按下面取消部分需要的注释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">             include snippets/fastcgi-php.conf;</span><br><span class="line">     #</span><br><span class="line">     #       # With php-fpm (or other unix sockets):</span><br><span class="line">             fastcgi_pass unix:/run/php/php8.1-fpm.sock;</span><br><span class="line">     #       # With php-cgi (or other tcp sockets):</span><br><span class="line">     #       fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line">     # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">     # concurs with nginx&#x27;s one</span><br><span class="line">     #</span><br><span class="line">     location ~ /\.ht &#123;</span><br><span class="line">             deny all;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>验证配置文件有没有错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>

<p>如果看到如下提示OK则说明配置搞定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure>

<p>重启Nginx：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure>

<p>如果重启没用直接用<code>kill 进程id</code>杀死这个进程，再<code>sudo nginx</code>启动nginx</p>
<p>使用如下查看进程id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -nao|grep 80</span><br></pre></td></tr></table></figure>

<p>一般nginx会使用80端口</p>
<p><strong>最终</strong></p>
<p>直接在浏览器输入ip或域名即可进入，会有引导配置。</p>
<p>使用<code>http://ip或域名/wp-admin/</code>可登录控制面板。</p>
<h2 id="插件、主题的安装"><a href="#插件、主题的安装" class="headerlink" title="插件、主题的安装"></a>插件、主题的安装</h2><p>方法都是类似的，</p>
<p>方法一：使用ftp服务器，直接从wordpress控制面板里下、安装。要配置ftp，没试过。</p>
<p>方法二：从官网下载插件或主题的安装包，上传到wp-content下对应的文件夹里。然后直接解压，在控制面版中即可直接看到。</p>
<h2 id="查看当前网卡带宽实时占用"><a href="#查看当前网卡带宽实时占用" class="headerlink" title="查看当前网卡带宽实时占用"></a>查看当前网卡带宽实时占用</h2><p>安装：<code>sudo apt-get install ethstatus</code></p>
<p>查看ADSL速度<code>sudo ethstatus -i eth0</code></p>
<p>查看网卡速度<code>sudo ethstatus -i eth0</code></p>
<p>同时能看实时发包情况</p>
<p>网卡名则是<code>ifconfig</code></p>
<p>按q退出查看界面。</p>
<h2 id="tree命令展示指定深度文件夹"><a href="#tree命令展示指定深度文件夹" class="headerlink" title="tree命令展示指定深度文件夹"></a>tree命令展示指定深度文件夹</h2><p>安装</p>
<p><code>sudo apt install tree</code></p>
<p>使用</p>
<p>直接使用，会显示指定文件夹下的所有文件：</p>
<p><code>tree 路径</code> </p>
<p>指定显示深度, 此处为3级：</p>
<p><code>tree -L 3 路径</code>  </p>
<p>只显示目录，不显示文件：</p>
<p><code>tree -d -L 3 路径</code> </p>
<h2 id="Wordpress好用的插件"><a href="#Wordpress好用的插件" class="headerlink" title="Wordpress好用的插件"></a>Wordpress好用的插件</h2><p>1、<strong>WPvivid Backup Plugin</strong>  自动备份插件</p>
<p>2、<strong>WP Githuber MD</strong> 写Markdown使用的插件，似乎不太好用，不是很符合理想，将不能使用<code>[toc]</code>生成目录。</p>
<p>3、<strong>WP Editor.md</strong> 同上。</p>
<p>其它：Hello Dolly插件可有可无</p>
<h2 id="存在的坑"><a href="#存在的坑" class="headerlink" title="存在的坑"></a>存在的坑</h2><p>暂时空着，后面再补。</p>
]]></content>
      <categories>
        <category>个人博客站搭建</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Wordpress</tag>
        <tag>mySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>NAT64、DNS64实现轻量级ipv6访问ipv4</title>
    <url>/2023/12/18/NAT64%E3%80%81DNS64%E5%AE%9E%E7%8E%B0%E8%BD%BB%E9%87%8F%E7%BA%A7ipv6%E8%AE%BF%E9%97%AEipv4/</url>
    <content><![CDATA[<h1 id="NAT64、DNS64实现轻量级ipv6访问ipv4"><a href="#NAT64、DNS64实现轻量级ipv6访问ipv4" class="headerlink" title="NAT64、DNS64实现轻量级ipv6访问ipv4"></a>NAT64、DNS64实现轻量级ipv6访问ipv4</h1><p><strong>注意：此方法获得的访问速度小于1Mbps</strong>，比较适用于基础报文通信，例如本人使用与ddns访问腾讯云的api，（都2023年了，腾讯云的api怎么还没有ipv6，QAQ）</p>
<p><strong>详细的NAT64和DNS64原理请自行<a href="https://cn.bing.com/search?q=nat64%E5%92%8Cdns64&form=ANNTH1&refig=656f14bc66a8459e8649899c5e7b8422&pc=LCTS">STFW</a>。</strong></p>
<p>首先从网上STFW获得NAT64或DNS64服务器的<a href="https://cn.bing.com/search?q=%E5%85%8D%E8%B4%B9%E7%9A%84nat64%E5%92%8Cdns64%E6%9C%8D%E5%8A%A1%E5%99%A8&qs=n&form=QBRE&sp=-1&lq=0&pq=%E5%85%8D%E8%B4%B9%E7%9A%84nat64%E5%92%8Cdns64%E6%9C%8D%E5%8A%A1%E5%99%A8&sc=0-17&sk=&cvid=565A62A30E3B45BAB8401317A6420469&ghsh=0&ghacc=0&ghpl=">地址</a>，这个地址即为我们要用的DNS服务器地址,设置为我们要用的DNS即可，不要设置为全局DNS，会让网络非常非常慢。</p>
<blockquote>
<p> 我们从这个服务器获得纯ipv4域名的对应ipv6地址，访问这个ipv6地址即可达到类似访问此域名ipv4的效果，但是速度很低（毕竟免费的，dns服务器还在国外，带宽低能理解）。</p>
</blockquote>
<p>注意：Windows要设置成对特定域名指定特殊dns即可。在本地组策略编辑中添加dns解析策略即可。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>6to4</tag>
        <tag>ipv6</tag>
        <tag>ipv4</tag>
      </tags>
  </entry>
  <entry>
    <title>QQ更改后缀</title>
    <url>/2023/12/18/QQ%E6%9B%B4%E6%94%B9%E5%90%8E%E7%BC%80/</url>
    <content><![CDATA[<p>原理</p>
<ol>
<li><p>\u202E 的作用是使得后续字符串从右至左读（RLO，即RIGHT-TO-LEFT OVERRIDE)，<br>如 123\u202EABC 输出后为 123CBA</p>
</li>
<li><p>\u202D 的作用是使得后续字符串从左至右左读（LRO，即LEFT-TO-RIGHT OVERRIDE)，，如 123\u202DABC 输出后为 123ABC</p>
</li>
</ol>
<p>举例<br>在消息列表中，QQ会将昵称、冒号、消息三者进行字符串拼接进行显示。如：</p>
<p>昵称：甲乙丙 \u202E \u202E !喵 \u202D<br>冒号：：<br>消息：12345<br>拼接后的字符串为：甲乙丙\u202E \u202E !喵\u202D：12345<br>以下是该字符串输出方式：(括号仅用来表示分组）</p>
<p>甲乙丙 \u202E \u202E!喵\u202D：12345</p>
<p>甲乙丙 \u202E (\u202E!喵) (\u202D：12345)</p>
<p>甲乙丙 (\u202D：12345 ) (\u202E !喵 )</p>
<p>甲乙丙 ：12345 \u202E !喵</p>
<p>甲乙丙 ：12345 喵!</p>
<p>此处的\u202E和\u202D已经被禁用</p>
<p>改用</p>
<p>从左到右隔离LEFT-TO-RIGHT ISOLATE（U+2066）：⁦</p>
<p>从右到左隔离RIGHT-TO-LEFT ISOLATE（U+2067）:⁧</p>
<p>例如：</p>
<p>甲乙丙⁧⁧<del>喵 ⁦<br>23-陈凡⁧⁧</del>喵 ⁦<br>⁧⁧~喵 ⁦</p>
<p><a href="./%E5%96%B5%E5%90%8E%E7%BC%80.txt">实例文档</a>用txt格式打开</p>
<p>字符代码复制<a href="https://fuhaoku.net/">网站</a></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>qq</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows对特定域名指定DNS解析路径</title>
    <url>/2023/12/18/Windows%E5%AF%B9%E7%89%B9%E5%AE%9A%E5%9F%9F%E5%90%8D%E6%8C%87%E5%AE%9ADNS%E8%A7%A3%E6%9E%90%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="Windows对特定域名指定DNS解析路径"><a href="#Windows对特定域名指定DNS解析路径" class="headerlink" title="Windows对特定域名指定DNS解析路径"></a>Windows对特定域名指定DNS解析路径</h1><p>[toc]</p>
<p>[Windows客户端不同域名走不同DNS服务器_独行侠丶龙龙的博客-CSDN博客](<a href="https://blog.csdn.net/Lumiadragon/article/details/131360096#:~:text=%E5%9C%A8Windows%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%8E%AF%E5%A2%83%E4%B8%AD%EF%BC%8C%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9F%9F%E5%90%8D%E8%B5%B0%E4%B8%8D%E5%90%8C%E7%9A%84DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9B">https://blog.csdn.net/Lumiadragon/article/details/131360096#:~:text=在Windows客户端环境中，不同的域名走不同的DNS服务器；</a> 以此应对企业级多元化解析需求。 1、打开Windows客户端中组策略设定 运行中，输入,gpedit.msc 并打开。 Windows搜索中，输入 编辑组策略 并打开。)</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>本地策略组</tag>
      </tags>
  </entry>
  <entry>
    <title>ipv6与ddns-go</title>
    <url>/2023/12/18/ipv6%E4%B8%8Eddns-go/</url>
    <content><![CDATA[<h1 id="IPV6与ddns-go"><a href="#IPV6与ddns-go" class="headerlink" title="IPV6与ddns-go"></a>IPV6与ddns-go</h1><p>由于想使用校园网的ipv6，可是ipv6地址并不会固定，这里使用ddns-go的方法，将域名指定的IPV6自动更新。</p>
<p>ddns-go会在服务设备连上网络时，自动向DNS服务器发送服务设备的IP以自动更新DNS的目标IP。</p>
<p>前提要求：设备能正常访问ipv6（测试网站<a href="https://www.test-ipv6.com/index.html.zh_CN">IPv6 测试</a>），有域名（此处是腾讯云）</p>
<h1 id="安装ddns-go"><a href="#安装ddns-go" class="headerlink" title="安装ddns-go"></a>安装ddns-go</h1><p>ddns-go安装地址：<a href="https://github.com/jeessy2/ddns-go">Releases · jeessy2&#x2F;ddns-go (github.com)</a></p>
<p>其实开源网站处已经给出安装方法。此处仅记录自己的安装过程。</p>
<p>这里时Windows系统，选择的Windows x86的release版本。</p>
<p>下载后解压后，点击即可自动开启ddns-go的控制面板，路径为<code>127.0.0.1:9876</code>。</p>
<p>要想自动启用，可以在当前目录下打开管理员身份的PowerShell，输入一下命令即可安装ddns-go服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\ddns-go.exe -s install</span><br></pre></td></tr></table></figure>

<p>可以在任务管理器的“服务”中看到该服务，也可以在windows的服务管理（任务管理器的“服务”下面有个打开服务）找到该服务、可以根据需求配置自启动规则。</p>
<h1 id="配置ddns-go"><a href="#配置ddns-go" class="headerlink" title="配置ddns-go"></a>配置ddns-go</h1><p>首先进入ddns-go的控制面板<code>127.0.0.1:9876</code>。</p>
<p>1、选择DNS服务商，DNS解析服务用的哪个就选哪个。我这里选择的时腾讯云。</p>
<p>2、创建对应的API。这里对应之前选的创建腾讯云API，到腾讯API密钥面板中，直接点击新建密钥即可，然后将SecretId和SecretKey对应填入。</p>
<p><img src="/.%5Cipv6%E4%B8%8Eddns-go%5Cimage-20231118214733331.png" alt="image-20231118214733331"></p>
<p>3、配置IP。由于这里没有公网IPV4，这里不使用IPV4，取消IPV4的勾选。勾选IPV6启用，我的配置是：通过网卡获取IP、匹配正则表达式：@1、Domains填入自己的域名，推荐是使用一个你的子域名即可。例如example.com域名，填入test.example.com就会在你的域名example.com下创建一条test主机名的解析地址。</p>
<p>4、此时保存即可使用。可以在日志中查看相应信息。建议在其他配置中开启 禁止公网访问，并设置登录用户名、密码，下次进入控制面板时要输入这个用户名密码。</p>
<blockquote>
<p>其他参考：<a href="https://tendcode.com/subject/article/ddns-go">ddns-go 的使用，实现公网 IPv6 下动态域名解析上网DDNS_TendCode</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>ipv6</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>openVPN配置搭建私人VPN</title>
    <url>/2023/12/18/openVPN%E9%85%8D%E7%BD%AE%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BAVPN/</url>
    <content><![CDATA[<h1 id="openVPN配置搭建私人VPN-for-Windows"><a href="#openVPN配置搭建私人VPN-for-Windows" class="headerlink" title="openVPN配置搭建私人VPN for Windows"></a>openVPN配置搭建私人VPN for Windows</h1><blockquote>
<p> <strong>首先说明：不要在未报备的情况下，使用VPN跨国通联，这将是违法行为</strong></p>
</blockquote>
<p><strong>解决的问题：</strong>使用openVPN通过ipv6实现私人VPN设置，实现远程联通到服务端的本地局域网（实际上还可以使用桥接模式课实现通过服务器和组织已有的大型局域网相连接，这里没有使用）。实现了sunshine的视频串流，用于远程操控电脑。</p>
<p>其他平替方案还有：Openwrt、zerotier，或者直接使用windows的wsl。</p>
<p><strong>openVPN开源项目</strong></p>
<p>openVPN的gitHub开源<a href="https://github.com/OpenVPN/openvpn/">OpenVPN&#x2F;openvpn</a>，openVPN官网<a href="https://openvpn.net/">openvpn.net</a></p>
<p>从<a href="https://openvpn.net/community-downloads/">openvpn.net</a>安装openVPN，注意windows端版本。</p>
<p>我这里是在Windows10环境下，安装的是<code>OpenVPN-2.6.8-I001-amd64.msi</code>。</p>
<p>双击跟随引导完成安装。</p>
<p>安卓端需要google的服务框架，可以从Google play下载，或者使用下面的连接安装</p>
<p>Android:<a href="https://cn.apkshki.com/app/openvpn-connect">OpenVPN Connect</a></p>
<p><strong>注：</strong>服务端和客户端程序是同一个，区别是配置文件的不同。</p>
<h2 id="EASY-RSA配置证书"><a href="#EASY-RSA配置证书" class="headerlink" title="EASY-RSA配置证书"></a>EASY-RSA配置证书</h2><p>从openVPN的GitHub上安装<a href="https://github.com/OpenVPN/easy-rsa">Easy-RSA</a>的release版本，这里用的是目前最新版V3.1.7</p>
<blockquote>
<p>如想不知道RSA是干嘛的，请自行搜索 ”TLS“</p>
</blockquote>
<p>将文件下载好后解压。文件夹内部：</p>
<p>主要使用的是EasyRSA目录下的<code>EasyRSA-Start.bat</code>脚本。通过该脚本提供的<code>EasyRSA Shell</code>进行CA root的生成，证书等大部分操作。</p>
<p>参考文献在EasyRSA目录下的README.quickstart.html文件，包含一些基本的操作指令。</p>
<p>也可以在EasyRSA Shell下使用<code>./easyrsa -h</code>获得帮助。</p>
<p><strong>操作开始：</strong></p>
<blockquote>
<p>可以将CA和server、client做在一起，并无影响，此处只是为了尽量规范化的将其分开</p>
<p>做在一起则不需要重复init-pki和配置，在同一个RSA Shell中完成操作即可</p>
</blockquote>
<p><strong>CA证书签发端：</strong></p>
<p>创建一个CA文件夹，在这个文件夹下：</p>
<p>将EasyRSA压缩包的文件解压到此，</p>
<p><strong>var</strong>参数配置。这些参数是一些基本的信息变量。服务端和客户端的var内容一致不知道会不会有问题。</p>
<p>将文件夹下的var.example复制一份并去除掉后缀，用记事本打开，根据需求修改参数。看不懂的话，大部分参数保持默认即可，下翻找到如下信息，修改成对应的就行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set_var EASYRSA_REQ_COUNTRY	&quot;US&quot;	#国家</span><br><span class="line">#set_var EASYRSA_REQ_PROVINCE	&quot;California&quot;	#地区、省</span><br><span class="line">#set_var EASYRSA_REQ_CITY	&quot;San Francisco&quot;	#城市</span><br><span class="line">#set_var EASYRSA_REQ_ORG	&quot;Copyleft Certificate Co&quot;	#公司</span><br><span class="line">#set_var EASYRSA_REQ_EMAIL	&quot;me@example.net&quot;	#邮箱</span><br><span class="line">#set_var EASYRSA_REQ_OU		&quot;My Organizational Unit&quot;	#公司单位</span><br></pre></td></tr></table></figure>

<p>初始化pki：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./easyrsa init-pki</span><br></pre></td></tr></table></figure>

<p>构建CA根证书：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./easyrsa build-ca</span><br></pre></td></tr></table></figure>

<p>回车后会要求设置密码，用于后面CA进行签名</p>
<p>生成证书撤销列表（CRL）密钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./easyrsa gen-crl</span><br></pre></td></tr></table></figure>

<p>之后想要删除某个客户端证书，可以通过如下命令撤销证书：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./easyrsa revoke &lt;name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>server端：</strong></p>
<p>创建一个server文件夹：</p>
<p>将EasyRSA压缩包的文件解压到此，</p>
<p>重复上面的init操作。</p>
<p>初始化pki：（如果和server端在一起就不用再初始化，初始化会清空<code>\pki</code>文件夹到默认值，会删除里面已存在的证书）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./easyrsa init-pki</span><br></pre></td></tr></table></figure>

<p><strong>生成申请</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./easyrsa gen-req &lt;Server&gt; nopass</span><br></pre></td></tr></table></figure>

<p>这里是生成了一个名为Server的实体，也就是服务端的公钥和私钥，nopass后缀是指定不用密码加密私钥，需要加密则删去该后缀。</p>
<p>回车后会要求设置密码等操作，直接回车会使用默认值。</p>
<p><strong>导入公钥（如果是同一文件夹下则不需要导入）</strong></p>
<p>生成完成后会给出公钥server.req和私钥server.key的文件位置。</p>
<p>复制证书：（此处如果server和CA是同一个，就直接进行CA签署即可）</p>
<p>生成好了后，再CA文件夹下创建一个<code>/tempPKI/tempReqs/</code>目录，将server公钥server.req复制到CA文件夹下的<code>/tempPKI/tempReqs/</code>目录。（在Windows目录环境下老是有些奇怪的问题，这里就干脆将文件直接复制过来了，当然，也可以直接使用req生成时给出的路径）</p>
<p>再使用CA的RSA shell：</p>
<p>将req导入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./easyrsa import-req /tempPKI/tempReqs/server.req &lt;servername&gt;</span><br></pre></td></tr></table></figure>

<p><strong>签署：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./easyrsa sign-req server &lt;servername&gt;</span><br></pre></td></tr></table></figure>

<p>此步骤将会使用CA的私钥进行签署，需要之前设置的CA私钥密码。</p>
<p>创建Diffie-Hellman，此步骤只用于服务端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./easyrsa gen-dh</span><br></pre></td></tr></table></figure>

<p><strong>client端：</strong></p>
<p>创建一个client文件夹：</p>
<p>后续与server端类似。</p>
<blockquote>
<p>参考文章<a href="https://blog.csdn.net/cx776474961/article/details/88775745">Linux easy-rsa制作证书_.&#x2F;easyrsa sign server server-CSDN博客</a></p>
</blockquote>
<p><strong>结果</strong></p>
<p>CA端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-/pki/</span><br><span class="line">ca.crt</span><br><span class="line">-/pki/issued/</span><br><span class="line">client.crt</span><br><span class="line">server.crt</span><br><span class="line">-/pki/private/</span><br><span class="line">ca.key</span><br><span class="line">dh.pem</span><br><span class="line">crl.pem</span><br></pre></td></tr></table></figure>

<p>server:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-/pki/</span><br><span class="line">ca.crt</span><br><span class="line">-/pki/issued/</span><br><span class="line">server.crt</span><br><span class="line">-/pki/private/</span><br><span class="line">server.key</span><br></pre></td></tr></table></figure>

<p>client:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-/pki/</span><br><span class="line">ca.crt</span><br><span class="line">-/pki/issued/</span><br><span class="line">client.crt</span><br><span class="line">-/pki/private/</span><br><span class="line">client.key</span><br></pre></td></tr></table></figure>

<p><strong>生成TLS认证密钥</strong></p>
<p>到openVPN的安装目录下</p>
<p>找到&#x2F;bin文件夹，在此目录下打开cmd命令窗口（不能直接打开就用win+r输入cmd打开，然后cd到此目录下</p>
<blockquote>
<p>如果C盘Program Files里可能因为权限问题无法直接写入</p>
<p>然后将此文件创建到D盘根目录或者rsa的pki&#x2F;private文件夹下保存</p>
</blockquote>
<p>写入<code>ta.key</code>文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\openvpn.exe --genkey --secret D:\ta.key</span><br></pre></td></tr></table></figure>

<p><strong>复制文件</strong></p>
<p>将这一系列生成好的配置复制到openVPN中：</p>
<p>复制生成好的ca证书，ta.key和server端证书及密钥到openvpn的server或client的config文件夹里</p>
<p>server端config需要的文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ca.crt</span><br><span class="line">ta.key</span><br><span class="line">server.key</span><br><span class="line">server.crt</span><br><span class="line">dh.pem</span><br><span class="line">crl.pem</span><br></pre></td></tr></table></figure>

<p>client端config需要的文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ca.crt</span><br><span class="line">ta.key</span><br><span class="line">client.key</span><br><span class="line">client.crt</span><br><span class="line">dh.pem</span><br><span class="line">crl.pem</span><br></pre></td></tr></table></figure>

<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>openVPN的客户端和服务端程序一致，区别是配置文件不同，<code>server.ovpn</code>为服务端，<code>client.ovpn</code>为客户端。</p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>从<a href="https://github.com/OpenVPN/openvpn/blob/master/sample/sample-config-files/server.conf">openvpn</a>上下载server端配置文件<code>server.conf</code>,或者直接在安装目录下（可以通过任务管理器查找到）的sample-config里找到，将文件复制到<code>C:\Users\&lt;usr&gt;\OpenVPN\config\</code>目录下,并重命名为<code>server.ovpn</code>。</p>
<p><strong>配置server.ovpn</strong></p>
<p>用记事本打开：</p>
<blockquote>
<p>注意：此文件中#和；都视为注释</p>
</blockquote>
<p>修改以下选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">port 1194 #选用1194端口为vpn所在端口</span><br><span class="line">proto udp #使用udp</span><br><span class="line">dev tun #使用tun</span><br><span class="line">dev-node &quot;OpenVPN TAP-Windows6&quot; #设置网络节点，这里输入windows电脑的网络适配器名称，位置在控制面板》网络和internet》网络连接，其中的OpenVPN TAP-Windows6是在安装的时候，msi程序自动添加的，一个适配器只能支持一个server，名字要用引号括起来。</span><br><span class="line">ca ca.crt</span><br><span class="line">cert server.crt</span><br><span class="line">key server.key  </span><br><span class="line">dh dh.pem</span><br><span class="line">#这里将之前所说的server端需要的几个配置文件全复制到与.ovpn文件相同的目录下，这里改成对应的名字</span><br><span class="line">topology subnet #使用subnet组网</span><br><span class="line">server 192.168.123.0 255.255.255.0 #设定使用的网段，在cmd中使用ipconfig查看已被使用的网段，设置一个没有被使用的网段，服务器将使用xxx.xxx.xxx.1 其他设备按顺序获得ip</span><br><span class="line">ifconfig-pool-persist ipp.txt #记录曾经登录过的客户端与对应ip</span><br><span class="line">push &quot;route 192.168.123.0 255.255.255.0&quot; #push route给client端，注意此处添加的路由将会把除server的ip以外的其他网段加入vpn访问的目标。</span><br><span class="line">client-to-client #打开客户端之间的通信</span><br><span class="line">keepalive 10 120</span><br><span class="line">tls-auth ta.key 0 #server端后缀为0，此处ta.key是之前生成的。</span><br><span class="line">cipher AES-256-CBC #不用改</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">status openvpn-status.log #ip使用记录日志</span><br><span class="line">verb 3 #不用改</span><br><span class="line">explicit-exit-notify 1</span><br></pre></td></tr></table></figure>

<p><strong>开放端口：</strong></p>
<p>打开控制面板，找到防火墙》高级设置，新建入站规则，选择端口，开放UDP，指定端口1194，命名方便辨识即可。</p>
<p><strong>共享Internet连接：</strong></p>
<p>通过此步骤将vpn接入到你要广播的IP上。</p>
<p>此处我要将vpn部署在网络适配器“以太网 3”上，使用其ipv6进行接入公网。</p>
<p>在”控制面板》网络和internet》网络连接“中找到“以太网 3”，右击》“属性”》”共享“，勾选”允许其他网络用户通过此计算机的Internet连接来连接“，在下面选项选择之前.ovpn配置中指定的网络适配器”OpenVPN TAP-Windows6” ,确定。(不开启这一步，会导致远程电脑TLS握手超时失败)</p>
<p><strong>启动VPN server</strong></p>
<p>在任务栏右侧找到openVPN GUI，右键》连接即可启动。如果有报错说明存在地方没配好，查看日志了解详细信息即可。</p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><strong>Windows</strong></p>
<p>使用相同的安装程序安装好后，将之前生成的证书等文件复制到<code>C:\Users\&lt;usr&gt;\OpenVPN\config\</code>目录下，并从openVPN的安装目录的sample-config里找到client.conf改为client.ovpn。</p>
<p><strong>注意：</strong>不同设备使用vpn要使用不同的证书，再生成几个就行。</p>
<p>修改如下文件内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client #标识为客户端</span><br><span class="line">dev tun #使用tun，这里要和服务端一致</span><br><span class="line">#不要开启dev-node</span><br><span class="line">proto udp #这里要和服务端一致</span><br><span class="line">remote &lt;yourhostname or ip address&gt; 1194 #端口与服务端一致，可以填ip或hostname，最终ip指向的是前面共享的那个网络适配器，我这里是&quot;以太网3&quot;,会自动检测是ipv4或者ipv6,可以用多个remote,程序会自动按顺序选择，如果开启了remote-random选项（即取消注释），则随机选择</span><br><span class="line">resolv-retry infinite #无限次重连尝试</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">mute-replay-warnings</span><br><span class="line">ca ca.crt</span><br><span class="line">cert client.crt</span><br><span class="line">key client.key</span><br><span class="line">remote-cert-tls server</span><br><span class="line">tls-auth ta.key 1 #client端后缀为1，此处ta.key是之前生成的。</span><br><span class="line">cipher AES-256-CBC</span><br><span class="line">verb 3</span><br></pre></td></tr></table></figure>

<p>如果不想每次配置都要复制ca.crt等一堆证书，可以把他们合成一个文件，在client.ovpn文件结尾追加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;ca&gt;</span><br><span class="line">这里放入你的ca.crt文件内容</span><br><span class="line">&lt;/ca&gt;</span><br><span class="line"></span><br><span class="line">&lt;cert&gt;</span><br><span class="line">这里放入你的client.crt文件内容</span><br><span class="line">&lt;/cert&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;</span><br><span class="line">这里放入你的client.key文件内容</span><br><span class="line">&lt;/key&gt;</span><br><span class="line">key-direction 1</span><br><span class="line">&lt;tls-auth&gt;</span><br><span class="line">这里放入你的ta.key文件内容</span><br><span class="line">&lt;/tls-auth&gt;</span><br></pre></td></tr></table></figure>

<p>同时删除前面的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ca ca.crt</span><br><span class="line">cert client.crt</span><br><span class="line">key client.key</span><br><span class="line">tls-auth ta.key 1 </span><br></pre></td></tr></table></figure>

<p>然后就可以在config文件夹中只放入client.ovpn即可。</p>
<p>（注意，此方法不适用于Android客户端）</p>
<p>任务管理器右侧选，右键择连接。</p>
<h3 id="Android端"><a href="#Android端" class="headerlink" title="Android端"></a>Android端</h3><p>需要下载openVPN app。</p>
<p>我这里用的是安卓端的3.3.4版本。</p>
<p>配置文件与电脑端一致，但需要把配置文件和证书文件分开：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ca.crt</span><br><span class="line">client.crt</span><br><span class="line">client.key</span><br><span class="line">ta.key</span><br><span class="line">client.ovpn</span><br></pre></td></tr></table></figure>

<p>进入软件，点击加号，选择Upload File，</p>
<p>同时选择这几个文件即可（用Android自带的文件管理可以选择多个文件同时导入，左上角选择）。</p>
<p>点击连接。</p>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>有多个网络连接server时需要修改好路由表，保证vpn的路由跃点数最小。</p>
<p>提示有Adapter未启用，或者xxx未启用，在服务中开启即可。最好设置其自动启动自动重启。</p>
<p><strong>如何查找需要访问的目标内网网页的ip：</strong></p>
<p>1、在内网中直接访问目标网页，获取其域名或者直接有ip</p>
<p>2、通过<code>ping -4 &lt;hostname&gt;</code>获取其ipv4的IP地址</p>
<p>3、填入对应的route，重启服务器即可更新配置。</p>
<h2 id="自己使用时遇到的BUG"><a href="#自己使用时遇到的BUG" class="headerlink" title="自己使用时遇到的BUG"></a>自己使用时遇到的BUG</h2><p><strong>1、能连上vpn，但推送的路由失效，server和client无法ping通</strong></p>
<p>检查下VPN所在的网卡ip，我的网卡老是被奇怪的设置手动固定IP：192.168.137.1，导致路由出错</p>
<p><strong>2、连不上VPN</strong></p>
<p>可能IP发生了变化，稍等一会即可。如果恢复不了，只能通过其他办法连接、线下修复或者期待奇迹出现。</p>
<blockquote>
<p>我遇到过的情况：</p>
<p>ip掉了（<strong>被上级路由ban了，上级路由寄了，或者网卡出问题没能DHCP到ip、ipv6有ip却ping不通任何</strong>（这个可太难了，没找到原因，反复重装驱动、卸载安装、调试跟踪路由都没有用，还会在莫名奇妙好了一会后再次断连，发现没有自动获取到ipv6的dns，关闭ipv4协议后有概率使ipv6复活，有时候还会在有ipv6地址和ipv6的dns服务器地址时，ping不通dns，tracert报错1231））</p>
<p>、服务器ip被clash之类的代理软件代理掉了、网卡的共享莫名奇妙掉了</p>
</blockquote>
<p>注意：外置网卡，特别是外置网卡上还有附带usb的，要设置设备的省电策略，免得被自动关闭。</p>
<p><strong>参考连接：</strong></p>
<p><a href="https://openvpn.net/community-resources/how-to/#intended-audience">操作指南：设置和配置 OpenVPN 客户端&#x2F;服务器 VPN |OpenVPN的</a></p>
<p>[[笔记]Windows使用OpenVpn构建虚拟局域网_windows 搭建vpn-CSDN博客](<a href="https://blog.csdn.net/qq1113673178/article/details/130488876?ops_request_misc=%7B%22request_id%22:%22170040623616800213098785%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170040623616800213098785&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-130488876-null-null.142%5Ev96%5Epc_search_result_base7&utm_term=openvpn">https://blog.csdn.net/qq1113673178/article/details/130488876?ops_request_misc=%7B%22request%5Fid%22%3A%22170040623616800213098785%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=170040623616800213098785&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-130488876-null-null.142^v96^pc_search_result_base7&amp;utm_term=openvpn</a> windows&amp;spm&#x3D;1018.2226.3001.4187)</p>
<p><a href="https://zhuanlan.zhihu.com/p/199176752">openvpn搭建与使用 - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>OpenVPN</category>
      </categories>
      <tags>
        <tag>ipv6</tag>
        <tag>Windows</tag>
        <tag>openVPN</tag>
        <tag>Easy-RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>局域网共享剪贴板</title>
    <url>/2023/12/18/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB%E5%89%AA%E8%B4%B4%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="局域网共享剪贴板"><a href="#局域网共享剪贴板" class="headerlink" title="局域网共享剪贴板"></a>局域网共享剪贴板</h1><p>[toc]</p>
<p>该方案服务端域使用程序一样，但是使用的配置文件不同。实际使用时占用空间差不多为1M。</p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>配置文件<code>config.yml</code>为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Role: server</span><br><span class="line">Port: 55555</span><br><span class="line">Password: 1234567890</span><br></pre></td></tr></table></figure>

<p><strong>需要手动创建该文件</strong>，将该文件放在和程序文件一个文件夹下。</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>配置文件<code>config.yml</code>为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host: 192.168.43.196</span><br><span class="line">Port: 55555</span><br><span class="line">Password: 1234567890</span><br></pre></td></tr></table></figure>

<p><strong>需要手动创建该文件</strong>，将该文件放在和程序文件一个文件夹下。</p>
<p>执行后放在后台静默运行即可，建议使用脚本并隐藏黑色控制台。</p>
<p>使用<code>win</code>+<code>v</code>即可查看剪贴板，复制后的东西都会存在这，两台电脑共享，还可满足多台电脑的共享。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>network share</tag>
      </tags>
  </entry>
  <entry>
    <title>家庭版Windows本地组策略编辑（gpedit.msc）不存在解决办法</title>
    <url>/2023/12/18/%E5%AE%B6%E5%BA%AD%E7%89%88Windows%E6%9C%AC%E5%9C%B0%E7%BB%84%E7%AD%96%E7%95%A5%E7%BC%96%E8%BE%91%EF%BC%88gpedit.msc%EF%BC%89%E4%B8%8D%E5%AD%98%E5%9C%A8%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h1 id="家庭版Windows本地组策略编辑（gpedit-msc）不存在解决办法"><a href="#家庭版Windows本地组策略编辑（gpedit-msc）不存在解决办法" class="headerlink" title="家庭版Windows本地组策略编辑（gpedit.msc）不存在解决办法"></a>家庭版Windows本地组策略编辑（gpedit.msc）不存在解决办法</h1><p>[toc]</p>
<p><strong>家庭版Windows无法打开gpedit.msc</strong></p>
<p>在桌面创建一个gpedit.txt文件，打开输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line">dir /b %systemroot%\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;gp.txt</span><br><span class="line">dir /b  %systemroot%\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;gp.txt</span><br><span class="line">for /f %%i in (&#x27;findstr /i . gp.txt 2^&gt;nul&#x27;) do dism /online /norestart /add-package:&quot;%systemroot%\servicing\Packages\%%i&quot;</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>退出，更改后缀为<code>.bat</code>，右键，点击以管理员身份运行。</p>
<p>等待脚本执行完成。</p>
<p>脚本执行完成后，之前写的文件可删。</p>
<p>使用<code>win+r</code>，执行<code>gpedit.msc</code>即可打开本地组策略编辑</p>
<blockquote>
<p><a href="https://www.xitongcheng.com/jiaocheng/win10_article_62313.html">参考连接</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>gpedit.msc</tag>
      </tags>
  </entry>
  <entry>
    <title>无终端窗口后台运行脚本</title>
    <url>/2023/12/18/%E6%97%A0%E7%BB%88%E7%AB%AF%E7%AA%97%E5%8F%A3%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="无终端窗口后台运行脚本"><a href="#无终端窗口后台运行脚本" class="headerlink" title="无终端窗口后台运行脚本"></a>无终端窗口后台运行脚本</h1><p>Linux后台运行进程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup &quot;运行的内容&quot; &amp;</span><br></pre></td></tr></table></figure>

<p>windows相应功能的命令行如下(此方法进程有页面，可能会在桌面展示，关闭窗口后进程消失。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> <span class="keyword">start</span> <span class="operator">/</span>min &quot;n&quot; &quot;运行的内容&quot;</span><br></pre></td></tr></table></figure>

<p>windows下</p>
<h2 id="方法一：使用bat脚本"><a href="#方法一：使用bat脚本" class="headerlink" title="方法一：使用bat脚本"></a>方法一：使用bat脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pushd %~dp0</span><br><span class="line">powershell.exe -command &quot;&amp; &#123;Start-Process -WindowStyle hidden -FilePath &#x27;文件路径&#x27;&#125;&quot;</span><br><span class="line">popd</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>文件后缀<code>*.bat</code></p>
<h2 id="方法二：使用powershell"><a href="#方法二：使用powershell" class="headerlink" title="方法二：使用powershell"></a>方法二：使用<code>powershell</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Start-Process -WindowStyle hidden -FilePath &quot;文件路径&quot; </span><br></pre></td></tr></table></figure>

<p>文件后缀<code>*.ps1</code></p>
<p>如何停止：<br>查看当前进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasklist |findstr <span class="string">&quot;进程名&quot;</span></span><br></pre></td></tr></table></figure>

<p>从左到右为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">映像名称                   PID 会话名              会话#       内存使用</span><br></pre></td></tr></table></figure>

<p>还可以通过进程id查看端口号:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano|findstr <span class="string">&quot;进程id“</span></span><br></pre></td></tr></table></figure>

<p>杀死进程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill 进程id</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>自动运行程序脚本</title>
    <url>/2023/12/18/%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="自动运行程序脚本"><a href="#自动运行程序脚本" class="headerlink" title="自动运行程序脚本"></a>自动运行程序脚本</h1><h2 id="使用-bat后缀文件脚本自动执行程序"><a href="#使用-bat后缀文件脚本自动执行程序" class="headerlink" title="使用.bat后缀文件脚本自动执行程序"></a>使用.bat后缀文件脚本自动执行程序</h2><p>大致文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">D:</span><br><span class="line">cd D:\software\Sunshine\tools</span><br><span class="line">dxgi-info.exe</span><br><span class="line">cmd</span><br></pre></td></tr></table></figure>

<p>基本原理是使用cmd命令终端，将路径移动到目标文件所在目录然后执行程序。</p>
<p>此脚本会保留命令窗口。</p>
<p>增加命令似乎只能在最终cmd那行之前。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
</search>
